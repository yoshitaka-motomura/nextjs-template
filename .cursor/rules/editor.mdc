---
alwaysApply: true
---

# Editor Rules (Cursor)

This file contains editing guidelines for Cursor. Please respect existing design and style, and do not make unrelated changes.

## Basic Principles

- **Minimal Changes**: Edit only the scope necessary to achieve the goal.
- **Consistency**: Satisfy TypeScript strict mode and pass ESLint.
- **Structure**: Don't break App Router configuration. Use `@/*` alias.

## Next.js / React Rules

- Server components are default. Add `"use client"` at top only when client-side is necessary.
- Prioritize server-side data fetching (server actions/route handlers).
- Document cache strategy for `fetch` (`{ cache: 'no-store' }` or `{ next: { revalidate } }`).
- Use `next/image` for images, `next/link` for links.
- Use `metadata` / `generateMetadata` for metadata.

## Files / Placement

- Pages: `src/app/**/page.tsx`
- Layouts: `src/app/**/layout.tsx`
- Route handlers: `src/app/api/**/route.ts`
- Global CSS only in `src/app/globals.css`. Prioritize Tailwind for local styles.
- Reusable UI in `src/components/**`. Business/utilities in `src/lib/**`.
- shadcn/ui components in `src/components/ui/*`.

## Tailwind v4

- Utility first. Arbitrary values only when necessary.
- Express dark mode/responsive with utilities.
- When custom CSS is needed, preserve meaning with CSS variables.

## Accessibility / Performance

- Appropriate `aria-*` and labels.
- Avoid unnecessary client JS, consider dynamic imports.
- `sizes` for images, `priority` for important images.

## Dependency Addition

- Document necessity and prioritize lightness/maintainability. Use `pnpm i` after addition.
- Use `react-icons` for icons (do not use `lucide-react`).
- Recommend `pnpm dlx shadcn add <component>` when adding UI components.

## Post-Change Verification

- Confirm types/ESLint with `pnpm lint`.
- Search impact scope and verify side effects.
- Verify build with `pnpm build` for UI changes.

## Commits

- Conventional Commits. Messages explain Why in 1-2 sentences. Don't include sensitive information.

## Current Project Structure

### Technology Stack
- **Next.js**: 15.5.0 (App Router + Turbopack)
- **React**: 19.1.0
- **TypeScript**: 5 (strict mode)
- **Tailwind CSS**: v4
- **Prisma**: ORM + MySQL
- **React Query**: TanStack Query
- **Zustand**: State management
- **shadcn/ui**: UI components

### Main Directories
```
src/
├── app/                    # Next.js App Router
│   ├── api/               # API Routes
│   ├── example/           # Example pages
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # React components
│   ├── icons/            # Icon components
│   ├── layout/           # Layout components
│   ├── providers/        # Provider components
│   └── ui/               # shadcn/ui components
├── lib/                   # Utilities & libraries
│   ├── api/              # API related
│   ├── db/               # Database related
│   ├── hooks/            # Custom hooks
│   ├── prisma.ts         # Prisma client
│   ├── query-client.ts   # React Query client
│   ├── store/            # Zustand stores
│   ├── types/            # Type definitions
│   ├── utils/            # Utility functions
│   └── validations/      # Zod validations
└── messages/              # Internationalization messages

prisma/
├── schema.prisma          # Prisma schema
└── migrations/            # Database migrations
```

### Important Files
- `src/lib/prisma.ts`: Prisma client (singleton pattern)
- `src/lib/query-client.ts`: React Query client configuration
- `src/components/providers/QueryProvider.tsx`: React Query provider
- `src/lib/store/`: Zustand stores
- `prisma/schema.prisma`: Database schema

### Development Scripts
- `pnpm dev`: Development server (Turbopack enabled)
- `pnpm build`: Build
- `pnpm lint`: ESLint execution
- `pnpm test`: Unit tests
- `pnpm prisma generate`: Generate Prisma client
- `pnpm prisma migrate dev`: Run migrations

### Commits
- Conventional Commits. Messages explain Why in 1-2 sentences. Don't include sensitive information.
---
# Editor Rules (Cursor)

This file contains editing guidelines for Cursor. Please respect existing design and style, and do not make unrelated changes.

## Basic Principles

- **Minimal Changes**: Edit only the scope necessary to achieve the goal.
- **Consistency**: Satisfy TypeScript strict mode and pass ESLint.
- **Structure**: Don't break App Router configuration. Use `@/*` alias.

## Next.js / React Rules

- Server components are default. Add `"use client"` at top only when client-side is necessary.
- Prioritize server-side data fetching (server actions/route handlers).
- Document cache strategy for `fetch` (`{ cache: 'no-store' }` or `{ next: { revalidate } }`).
- Use `next/image` for images, `next/link` for links.
- Use `metadata` / `generateMetadata` for metadata.

## Files / Placement

- Pages: `src/app/**/page.tsx`
- Layouts: `src/app/**/layout.tsx`
- Route handlers: `src/app/api/**/route.ts`
- Global CSS only in `src/app/globals.css`. Prioritize Tailwind for local styles.
- Reusable UI in `src/components/**`. Business/utilities in `src/lib/**`.
- shadcn/ui components in `src/components/ui/*`.

## Tailwind v4

- Utility first. Arbitrary values only when necessary.
- Express dark mode/responsive with utilities.
- When custom CSS is needed, preserve meaning with CSS variables.

## Accessibility / Performance

- Appropriate `aria-*` and labels.
- Avoid unnecessary client JS, consider dynamic imports.
- `sizes` for images, `priority` for important images.

## Dependency Addition

- Document necessity and prioritize lightness/maintainability. Use `pnpm i` after addition.
- Use `react-icons` for icons (do not use `lucide-react`).
- Recommend `pnpm dlx shadcn add <component>` when adding UI components.

## Post-Change Verification

- Confirm types/ESLint with `pnpm lint`.
- Search impact scope and verify side effects.
- Verify build with `pnpm build` for UI changes.

## Commits

- Conventional Commits. Messages explain Why in 1-2 sentences. Don't include sensitive information.

## Current Project Structure

### Technology Stack
- **Next.js**: 15.5.0 (App Router + Turbopack)
- **React**: 19.1.0
- **TypeScript**: 5 (strict mode)
- **Tailwind CSS**: v4
- **Prisma**: ORM + MySQL
- **React Query**: TanStack Query
- **Zustand**: State management
- **shadcn/ui**: UI components

### Main Directories
```
src/
├── app/                    # Next.js App Router
│   ├── api/               # API Routes
│   ├── example/           # Example pages
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # React components
│   ├── icons/            # Icon components
│   ├── layout/           # Layout components
│   ├── providers/        # Provider components
│   └── ui/               # shadcn/ui components
├── lib/                   # Utilities & libraries
│   ├── api/              # API related
│   ├── db/               # Database related
│   ├── hooks/            # Custom hooks
│   ├── prisma.ts         # Prisma client
│   ├── query-client.ts   # React Query client
│   ├── store/            # Zustand stores
│   ├── types/            # Type definitions
│   ├── utils/            # Utility functions
│   └── validations/      # Zod validations
└── messages/              # Internationalization messages

prisma/
├── schema.prisma          # Prisma schema
└── migrations/            # Database migrations
```

### Important Files
- `src/lib/prisma.ts`: Prisma client (singleton pattern)
- `src/lib/query-client.ts`: React Query client configuration
- `src/components/providers/QueryProvider.tsx`: React Query provider
- `src/lib/store/`: Zustand stores
- `prisma/schema.prisma`: Database schema

### Development Scripts
- `pnpm dev`: Development server (Turbopack enabled)
- `pnpm build`: Build
- `pnpm lint`: ESLint execution
- `pnpm test`: Unit tests
- `pnpm prisma generate`: Generate Prisma client
- `pnpm prisma migrate dev`: Run migrations

### Commits
- Conventional Commits. Messages explain Why in 1-2 sentences. Don't include sensitive information.
