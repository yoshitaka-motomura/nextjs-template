---
alwaysApply: true
---


# Testing Rules (Cursor)

This document outlines the testing policy and recommended configuration for this project. If not yet introduced, please add with minimal dependencies after documenting the reason.

## Recommended Stack
- Unit/Component: Jest + Testing Library (React)

Scripts in `package.json`:
- `test`: jest execution
- `test:watch`: jest watch execution

## Placement Conventions
- Unit: `src/**/__tests__/**/*.{test,spec}.{ts,tsx}`

## Testing Policy
- **Minimal Mocking**: Mock networks with MSW etc. at boundary units.
- **Stability**: Prevent flakiness (explicit waiting/timing).
- **Reduce Implementation Coupling**: Verify public APIs/behavior, not internal implementation.
- **Server**: Verify inputs/outputs and side effects for route handlers/server actions.

## next-intl Simple Mock Example
```ts
// test/utils/intl.tsx
import { ReactNode } from 'react';
import { IntlProvider } from 'next-intl';

export function withIntl(children: ReactNode, locale: string = 'en', messages: Record<string, string> = {}) {
  return <IntlProvider locale={locale} messages={messages}>{children}</IntlProvider>;
}
```

## Component Testing Guidelines
- Describe user operations with Testing Library.
- Get elements using ARIA roles/labels.
- Minimize snapshots.

## Execution Verification
- After addition, ensure `pnpm lint` and `pnpm test:unit` pass.
- When introducing CI, prioritize stable execution considering caching and parallelism.

## Current Testing Configuration

### Jest Configuration
```json
{
  "jest": {
    "testEnvironment": "jsdom",
    "testMatch": [
      "**/__tests__/**/*.{test,spec}.{js,jsx,ts,tsx}",
      "**/?(*.)+(test|spec).{js,jsx,ts,tsx}"
    ],
    "transform": {
      "^.+\\.(js|jsx|ts|tsx)$": [
        "babel-jest",
        {
          "presets": ["next/babel"]
        }
      ]
    },
    "moduleNameMapper": {
      "^@/(.*)$": "<rootDir>/src/$1",
      "\\.(css|less|sass|scss)$": "identity-obj-proxy"
    },
    "setupFilesAfterEnv": ["<rootDir>/jest.setup.ts"]
  }
}
```

### Testing Dependencies
- **Jest**: ^30.0.5
- **Testing Library**: @testing-library/jest-dom ^6.8.0
- **Babel**: babel-jest ^30.0.5

## Test File Examples

### Unit Test Example
```typescript
// src/__tests__/utils.test.ts
import { formatDate } from '@/lib/utils'

describe('formatDate', () => {
  it('should format date correctly', () => {
    const date = new Date('2024-01-01')
    expect(formatDate(date)).toBe('2024-01-01')
  })
})
```

### Component Test Example
```typescript
// src/components/__tests__/Button.test.tsx
import { render, screen } from '@testing-library/react'
import { Button } from '../ui/button'

describe('Button', () => {
  it('should render with correct text', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument()
  })
})
```

- For UI changes, also run `pnpm e2e` for E2E tests.
- When introducing CI, prioritize stable execution considering caching and parallelism.

# Testing Rules (Cursor)

This document outlines the testing policy and recommended configuration for this project. If not yet introduced, please add with minimal dependencies after documenting the reason.

## Recommended Stack
- Unit/Component: Jest + Testing Library (React)

Scripts in `package.json`:
- `test`: jest execution
- `test:watch`: jest watch execution

## Placement Conventions
- Unit: `src/**/__tests__/**/*.{test,spec}.{ts,tsx}`

## Testing Policy
- **Minimal Mocking**: Mock networks with MSW etc. at boundary units.
- **Stability**: Prevent flakiness (explicit waiting/timing).
- **Reduce Implementation Coupling**: Verify public APIs/behavior, not internal implementation.
- **Server**: Verify inputs/outputs and side effects for route handlers/server actions.

## next-intl Simple Mock Example
```ts
// test/utils/intl.tsx
import { ReactNode } from 'react';
import { IntlProvider } from 'next-intl';

export function withIntl(children: ReactNode, locale: string = 'en', messages: Record<string, string> = {}) {
  return <IntlProvider locale={locale} messages={messages}>{children}</IntlProvider>;
}
```

## Component Testing Guidelines
- Describe user operations with Testing Library.
- Get elements using ARIA roles/labels.
- Minimize snapshots.

## Execution Verification
- After addition, ensure `pnpm lint` and `pnpm test:unit` pass.
- When introducing CI, prioritize stable execution considering caching and parallelism.

## Current Testing Configuration

### Jest Configuration
```json
{
  "jest": {
    "testEnvironment": "jsdom",
    "testMatch": [
      "**/__tests__/**/*.{test,spec}.{js,jsx,ts,tsx}",
      "**/?(*.)+(test|spec).{js,jsx,ts,tsx}"
    ],
    "transform": {
      "^.+\\.(js|jsx|ts|tsx)$": [
        "babel-jest",
        {
          "presets": ["next/babel"]
        }
      ]
    },
    "moduleNameMapper": {
      "^@/(.*)$": "<rootDir>/src/$1",
      "\\.(css|less|sass|scss)$": "identity-obj-proxy"
    },
    "setupFilesAfterEnv": ["<rootDir>/jest.setup.ts"]
  }
}
```

### Testing Dependencies
- **Jest**: ^30.0.5
- **Testing Library**: @testing-library/jest-dom ^6.8.0
- **Babel**: babel-jest ^30.0.5

## Test File Examples

### Unit Test Example
```typescript
// src/__tests__/utils.test.ts
import { formatDate } from '@/lib/utils'

describe('formatDate', () => {
  it('should format date correctly', () => {
    const date = new Date('2024-01-01')
    expect(formatDate(date)).toBe('2024-01-01')
  })
})
```

### Component Test Example
```typescript
// src/components/__tests__/Button.test.tsx
import { render, screen } from '@testing-library/react'
import { Button } from '../ui/button'

describe('Button', () => {
  it('should render with correct text', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument()
  })
})
```

- For UI changes, also run `pnpm e2e` for E2E tests.
- When introducing CI, prioritize stable execution considering caching and parallelism.
