## Cursor Project Rules for myapps-nextjs

This file contains project-specific rules/context for Cursor's AI. Please strictly follow these guidelines.

### Project Overview
- **Framework**: Next.js 15.5 (App Router)
- **React**: 19.1
- **TypeScript**: strict
- **Styling**: Tailwind CSS v4 + PostCSS
- **i18n**: next-intl
- **Bundler**: Turbopack (dev/build)
- **Package Manager**: pnpm
- **Path Alias**: `@/*` → `src/*`
- **UI**: shadcn/ui (managed via `components.json`)
- **Icons**: react-icons (do not use lucide-react)

### Frequently Used Commands (Always use pnpm)
- Development: `pnpm dev`
- Build: `pnpm build`
- Production Start: `pnpm start`
- Lint: `pnpm lint`
- Testing: `pnpm test` / Watch: `pnpm test:watch`
- Format: `pnpm format` / Check: `pnpm format:check`

### Directory Structure (Main)
- `src/app/` App Router pages/layouts/route handlers
- `src/app/layout.tsx` Root layout (Geist fonts)
- `src/app/page.tsx` Top page
- `src/app/globals.css` Global styles (Tailwind v4)
- `src/app/api/health/route.ts` Health check API (GET/HEAD, no-cache)
- `src/components/ui/*` shadcn/ui component collection
- `src/lib/` Shared utilities and actions
- `src/lib/utils.ts` Utility functions
- `src/lib/actions/*` Server Actions used across multiple pages
- `public/` Static assets
- Configuration: `next.config.ts`, `tsconfig.json`, `eslint.config.mjs`, `postcss.config.mjs`
- `components.json` shadcn/ui configuration (style/baseColor/aliases)

#### Page-Specific File Organization
Use the following structure within each route directory:

```
src/app/[route]/
├── _components/          # Page-specific components (underscore prevents routing)
│   ├── ComponentName.tsx # PascalCase naming
│   └── FormComponent.tsx
├── _actions/            # Page-specific Server Actions (underscore prevents routing)
│   ├── create-item.ts   # kebab-case naming, function-specific files
│   ├── update-item.ts
│   └── delete-item.ts
├── page.tsx
└── layout.tsx
```

**File Placement Guidelines:**
- **Page-specific components**: `src/app/[route]/_components/`
- **Global shared components**: `src/components/ui/` (shadcn/ui)
- **Page-specific Server Actions**: `src/app/[route]/_actions/`
- **Global shared Server Actions**: `src/lib/actions/`

---

### AI Work Policy (Required Reading)
1. Perform code exploration before making changes.
   - Use ripgrep-equivalent search to understand usage/declaration/dependency scope.
   - Understand `@/*` alias to resolve paths.
2. Make changes minimal, high-quality, and reversible.
   - Don't perform unrelated refactoring.
   - Follow existing code style and design.
3. Always verify after changes.
   - Pass type checking and Lint (verify build if possible).
   - Add simple self-verification code/stories for runtime-impacting changes.
4. Use pnpm for dependency additions and document reasons.
5. Don't commit sensitive information (API Keys, environment variables, private URLs).
6. Documentation/comments should be concise. Briefly add design intent (Why).

### Coding Standards (Summary)
- Naming: No abbreviations, meaningful names. Functions use verbs, variables use nouns.
- Types: Explicit annotations for public APIs. Avoid unnecessary any/unsafe casts.
- Control: Early returns, shallow nesting, handle exceptions with purpose.
- Comments: Write intent, not mechanism. Avoid verbose comments.
- Format: Follow existing style, wrap long lines.

### Next.js 15 / React 19 Guidelines
- Server components are default. Add `"use client"` at file top only when client-side is necessary.
- Prioritize server actions/route handlers for data fetching. Document cache strategy for `fetch`.
- Use React 19 APIs while prioritizing compatibility and stability (avoid unstable features)
- Use App Router's `metadata`/`generateMetadata` for metadata

### Server Actions Best Practices
- Must include `'use server'` directive at file top
- Always validate form data
- Implement proper error handling (try-catch)
- Use `revalidatePath()` or `revalidateTag()` after data changes
- Split by function (e.g., `create-user.ts`, `update-user.ts`)
- Follow single responsibility principle (one file, one function)

### Tailwind CSS v4
- Utility first. Don't increase custom CSS with duplicate meaning
- Prioritize default color/spacing scale. Variable-ize custom values

