---
alwaysApply: true
---

## Testing Rules (Cursor)

This document outlines the testing policy and recommended configuration for this project. If not yet introduced, please add with minimal dependencies after documenting the reason.

### Recommended Stack
- Unit/Component: Jest + Testing Library (React)
- E2E: Playwright (already introduced)

Scripts in `package.json`:
- `test`: jest execution
- `test:watch`: jest watch execution
- `e2e`: playwright test execution
- `e2e:ui`: playwright UI mode
- `e2e:headed`: playwright browser display mode

### Placement Conventions
- Unit: `src/**/__tests__/**/*.{test,spec}.{ts,tsx}`
- E2E: `e2e/**.spec.ts`

### Testing Policy
- **Minimal Mocking**: Mock networks with MSW etc. at boundary units.
- **Stability**: Prevent flakiness (explicit waiting/timing).
- **Reduce Implementation Coupling**: Verify public APIs/behavior, not internal implementation.
- **Server**: Verify inputs/outputs and side effects for route handlers/server actions.
- **E2E**: Test critical user workflows and API endpoints.

### next-intl Simple Mock Example
```ts
// test/utils/intl.tsx
import { ReactNode } from 'react';
import { IntlProvider } from 'next-intl';

export function withIntl(children: ReactNode, locale: string = 'ja', messages: Record<string, string> = {}) {
  return <IntlProvider locale={locale} messages={messages}>{children}</IntlProvider>;
}
```

### Component Testing Guidelines
- Describe user operations with Testing Library.
- Get elements using ARIA roles/labels.
- Minimize snapshots.

### E2E Guidelines (Playwright)
- Only critical scenarios (critical paths).
- Minimize `data-testid` dependency, use accessibility selectors whenever possible.
- Prioritize `getByRole`, `getByText`, `getByLabel`.
- Test responsive compatibility (desktop, tablet, mobile).
- Direct testing of API endpoints (using request fixture).

### Execution Verification
- After addition, ensure `pnpm lint` and `pnpm test` pass.
- For UI changes, also run `pnpm e2e` for E2E tests.
- When introducing CI, prioritize stable execution considering caching and parallelism.
