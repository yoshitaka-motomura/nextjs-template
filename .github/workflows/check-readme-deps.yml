name: Check README Dependencies Sync

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'package.json'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'README.md'

jobs:
  check-readme-sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Check dependencies sync
      run: |
        # Create dependency check script
        cat > check-deps.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // Read package.json
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        const readmeContent = fs.readFileSync('README.md', 'utf8');

        // Extract dependencies from package.json
        const dependencies = packageJson.dependencies || {};
        const devDependencies = packageJson.devDependencies || {};

        let hasErrors = false;
        const errors = [];

        // Check dependencies section
        console.log('Checking dependencies...');
        for (const [pkg, version] of Object.entries(dependencies)) {
          const escapedPkg = pkg.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          const regex = new RegExp(`\\|\\s*${escapedPkg}\\s*\\|\\s*([^\\|]+)\\s*\\|`, 'g');
          const match = readmeContent.match(regex);
          
          if (!match) {
            errors.push(`❌ Missing dependency in README: ${pkg}`);
            hasErrors = true;
          } else {
            // Extract version from README
            const readmeVersion = match[0].split('|')[2].trim();
            console.log(`✅ Found ${pkg}: package.json=${version}, README=${readmeVersion}`);
          }
        }

        // Check devDependencies section
        console.log('Checking devDependencies...');
        for (const [pkg, version] of Object.entries(devDependencies)) {
          const escapedPkg = pkg.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          const regex = new RegExp(`\\|\\s*${escapedPkg}\\s*\\|\\s*([^\\|]+)\\s*\\|`, 'g');
          const match = readmeContent.match(regex);
          
          if (!match) {
            errors.push(`❌ Missing devDependency in README: ${pkg}`);
            hasErrors = true;
          } else {
            // Extract version from README
            const readmeVersion = match[0].split('|')[2].trim();
            console.log(`✅ Found ${pkg}: package.json=${version}, README=${readmeVersion}`);
          }
        }

        // Check for extra packages in README that don't exist in package.json
        const allPackages = { ...dependencies, ...devDependencies };
        const readmePackageRegex = /\|\s*([^|]+)\s*\|\s*([^|]+)\s*\|[^|]*\|[^|]*\|/g;
        let readmeMatch;
        
        console.log('Checking for extra packages in README...');
        while ((readmeMatch = readmePackageRegex.exec(readmeContent)) !== null) {
          const readmePkg = readmeMatch[1].trim();
          
          // Skip header rows and empty rows
          if (readmePkg === 'パッケージ' || readmePkg === '--------' || !readmePkg) {
            continue;
          }
          
          if (!allPackages[readmePkg]) {
            errors.push(`❌ Extra package in README not found in package.json: ${readmePkg}`);
            hasErrors = true;
          }
        }

        if (hasErrors) {
          console.error('\n🚨 Dependencies synchronization check failed!');
          console.error('The following issues were found:');
          errors.forEach(error => console.error(error));
          console.error('\nPlease update README.md to match package.json dependencies.');
          process.exit(1);
        } else {
          console.log('\n✅ All dependencies are properly synchronized between package.json and README.md');
        }
        EOF
        
        node check-deps.js
        
    - name: Check if package.json was modified
      id: check-package-json
      run: |
        if git diff --name-only HEAD~1 | grep -q "package.json"; then
          echo "package_json_modified=true" >> $GITHUB_OUTPUT
        else
          echo "package_json_modified=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Check if README.md was modified
      id: check-readme
      run: |
        if git diff --name-only HEAD~1 | grep -q "README.md"; then
          echo "readme_modified=true" >> $GITHUB_OUTPUT
        else
          echo "readme_modified=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Fail if package.json updated but README.md not updated
      if: steps.check-package-json.outputs.package_json_modified == 'true' && steps.check-readme.outputs.readme_modified == 'false'
      run: |
        echo "🚨 Error: package.json was updated but README.md was not updated!"
        echo "When dependencies are changed in package.json, the dependency tables in README.md must also be updated."
        echo "Please update the dependency tables in README.md to reflect the changes in package.json."
        exit 1