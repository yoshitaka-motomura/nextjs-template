---
alwaysApply: true
---


## Cursor Project Rules

This file contains project-specific rules/context for Cursor's AI. Please strictly follow these guidelines.

### Project Overview
- **Framework**: Next.js 15.5 (App Router)
- **React**: 19.1
- **TypeScript**: strict
- **Database**: Prisma ORM with MySQL
- **Styling**: Tailwind CSS v4 + PostCSS
- **State Management**: Zustand (lightweight state management)
- **Server State**: TanStack Query (data fetching & caching)
- **Authentication**: WorkOS AuthKit (enterprise-grade SSO)
- **API Framework**: Hono (lightweight web framework for API Routes)
- **Infrastructure**: AWS CDK v2 (Infrastructure as Code)
- **Storage**: AWS S3 (file uploads and storage)
- **Default Language**: Japanese (ja)
- **Bundler**: Turbopack (dev/build)
- **Package Manager**: pnpm
- **Path Alias**: `@/*` ‚Üí `src/*`
- **UI**: shadcn/ui (managed via `components.json`)
- **Icons**: react-icons (do not use lucide-react)

### Frequently Used Commands (Always use pnpm)
- Development: `pnpm dev`
- Build: `pnpm build`
- Production Start: `pnpm start`
- Lint: `pnpm lint`
- Testing: `pnpm test` / Watch: `pnpm test:watch`
- Format: `pnpm format` / Check: `pnpm format:check`
- Database: `pnpm db:generate` / `pnpm db:push` / `pnpm db:studio` / `pnpm db:seed`

### Directory Structure (Main)
- `src/app/` App Router pages/layouts/route handlers
  - `src/app/layout.tsx` Root layout (Geist fonts, WorkOS AuthKit provider)
  - `src/app/page.tsx` Top page
  - `src/app/globals.css` Global styles (Tailwind v4)
  - `src/app/api/[[...route]]/route.ts` API Routes (Hono integration)
  - `src/app/(auth)/` **Authentication protected group**
    - `src/app/(auth)/account/page.tsx` Account management (protected)
    - `src/app/(auth)/notes/page.tsx` Notes management (protected)
  - `src/app/callback/route.ts` WorkOS authentication callback
  - `src/app/login/route.ts` Login redirect to WorkOS
  - `src/app/signup/route.ts` Signup redirect to WorkOS
- `src/components/ui/*` shadcn/ui component collection
- `src/components/auth/AuthButton.tsx` Authentication button with WorkOS
- `src/lib/` Shared utilities and actions
  - `src/lib/api/` API endpoints (Hono)
  - `src/lib/utils.ts` Utility functions
  - `src/lib/prisma.ts` Prisma client configuration
  - `src/lib/workos.ts` WorkOS configuration
  - `src/lib/actions/*` Server Actions used across multiple pages
- `src/middleware.ts` Next.js middleware (authentication protection)
- `docs/` Project documentation
  - `docs/README.md` Documentation overview
- `public/` Static assets
- `prisma/` Database configuration
  - `prisma/schema.prisma` Database schema and models
  - `prisma/seed.ts` Database seeding script
- Configuration: `next.config.ts`, `tsconfig.json`, `eslint.config.mjs`, `postcss.config.mjs`
- `components.json` shadcn/ui configuration (style/baseColor/aliases)
- `infra/` AWS CDK infrastructure configuration
  - `infra/lib/infra-stack.ts` AWS CDK stack definition (S3, etc.)
  - `infra/package.json` CDK dependencies and scripts

#### Page-Specific File Organization
Use the following structure within each route directory:

```
src/app/[route]/
‚îú‚îÄ‚îÄ _components/          # Page-specific components (underscore prevents routing)
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.tsx # PascalCase naming
‚îÇ   ‚îî‚îÄ‚îÄ FormComponent.tsx
‚îú‚îÄ‚îÄ _actions/            # Page-specific Server Actions (underscore prevents routing)
‚îÇ   ‚îú‚îÄ‚îÄ create-item.ts   # kebab-case naming, function-specific files
‚îÇ   ‚îú‚îÄ‚îÄ update-item.ts
‚îÇ   ‚îî‚îÄ‚îÄ delete-item.ts
‚îú‚îÄ‚îÄ page.tsx
‚îî‚îÄ‚îÄ layout.tsx
```

**File Placement Guidelines:**
- **Page-specific components**: `src/app/[route]/_components/`
- **Global shared components**: `src/components/ui/` (shadcn/ui)
- **Page-specific Server Actions**: `src/app/[route]/_actions/`
- **Global shared Server Actions**: `src/lib/actions/`

---

### AI Work Policy (Required Reading)
1. Perform code exploration before making changes.
   - Use ripgrep-equivalent search to understand usage/declaration/dependency scope.
   - Understand `@/*` alias to resolve paths.
2. Make changes minimal, high-quality, and reversible.
   - Don't perform unrelated refactoring.
   - Follow existing code style and design.
3. Always verify after changes.
   - Pass type checking and Lint (verify build if possible).
   - Add simple self-verification code/stories for runtime-impacting changes.
4. Use pnpm for dependency additions and document reasons.
5. Don't commit sensitive information (API Keys, environment variables, private URLs).
6. Documentation/comments should be concise. Briefly add design intent (Why).
7. After installing any dependency package, always update `README.md`.
   - Include package name and version
   - Briefly explain the purpose/reason for adding it
   - Document any required setup steps and scripts

### Coding Standards (Summary)
- Naming: No abbreviations, meaningful names. Functions use verbs, variables use nouns.
- Types: Explicit annotations for public APIs. Avoid unnecessary any/unsafe casts.
- Control: Early returns, shallow nesting, handle exceptions with purpose.
- Comments: Write intent, not mechanism. Avoid verbose comments.
- Format: Follow existing style, wrap long lines.

### Next.js 15 / React 19 Guidelines
- Server components are default. Add `"use client"` at file top only when client-side is necessary.
- **Content Language**: All content and UI text is in Japanese by default
- Prioritize server actions/route handlers for data fetching. Document cache strategy for `fetch`.
- Use React 19 APIs while prioritizing compatibility and stability (avoid unstable features)
- Use App Router's `metadata`/`generateMetadata` for metadata

### Server Actions Best Practices
- Must include `'use server'` directive at file top
- Always validate form data
- Implement proper error handling (try-catch)
- Use `revalidatePath()` or `revalidateTag()` after data changes
- Split by function (e.g., `create-user.ts`, `update-user.ts`)
- Follow single responsibility principle (one file, one function)

### Database (Prisma) Best Practices
- Import Prisma client: `import { prisma } from '@/lib/prisma'`
- Always handle database errors with try-catch
- Use TypeScript types generated by Prisma
- Include relations with `include` when needed
- Use transactions for multi-table operations
- Always validate data before database operations

### Authentication (WorkOS) Best Practices
- **Protected Routes**: Use `app/(auth)` group for authentication-required pages
- **Server Components**: Use `withAuth` from `@workos-inc/authkit-nextjs`
- **Client Components**: Use `useAuth` hook for user state management
- **Middleware**: Authentication is automatically handled by `middleware.ts`
- **Error Handling**: Proper authentication error responses and redirects
- **Session Management**: WorkOS handles sessions automatically

### Git & Commits

#### Commit Message Format
Use Conventional Commits with emojis:

- ‚ú® **feat**: New features
- üêõ **fix**: Bug fixes
- üìù **docs**: Documentation changes
- üé® **style**: Code style changes
- üîÑ **refactor**: Code refactoring
- üß™ **test**: Adding or updating tests
- üßπ **chore**: Maintenance tasks
- üöÄ **perf**: Performance improvements
- ü§ñ **ci**: CI/CD changes

#### Commit Guidelines
- **One Purpose**: One commit = one logical change
- **Clear Message**: Explain what and why in 1-2 sentences
- **No Sensitive Info**: Avoid API keys, URLs, or environment variables

#### Quality Checklist
Before committing, ensure:
- [ ] TypeScript compilation passes
- [ ] ESLint passes (`pnpm lint`)
- [ ] Unit tests pass (`pnpm test`)
- [ ] E2E tests pass (`pnpm e2e`) - if UI changes
- [ ] Build succeeds (`pnpm build`)
- [ ] Changes follow existing patterns
- [ ] No sensitive information is included
- [ ] Commit message follows conventions

### Tailwind CSS v4
- Utility first. Don't increase custom CSS with duplicate meaning
- Prioritize default color/spacing scale. Variable-ize custom values


- Prioritize default color/spacing scale. Variable-ize custom values

### Documentation
Project documentation should be stored in the docs directory. If any documentation is missing, add or update it accordingly. Keep edits to the project's README.md to a minimum.

### Work Instructions documentation for AI

If the project structure changes, update the documents under the following directories as well. When doing so, follow the documentation style and make significant changes only after obtaining clear confirmation from the relevant personnel.

#### Cursor Rules
- `./.cursor/rules/editor.mdc` - Editor rules
- `./.cursor/rules/project.mdc` - Project rules
- `./.cursor/rules/coding.mdc` - Coding rules
- `./.cursor/rules/tests.mdc` - Tests rules
- `./.cursor/rules/database.mdc` - Database rules

#### GitHub Copilot Instructions
- `./.github/copilot-instructions.md` - GitHub Copilot instructions

#### CLAUDE CLI
- `CLAUDE.md` - CLAUDE CLI rules

#### CLAUDE CLI
- `CLAUDE.md` - CLAUDE CLI rules