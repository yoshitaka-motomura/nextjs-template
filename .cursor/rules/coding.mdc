---
alwaysApply: true
---
## Coding Guidelines

This document outlines the "basic implementation guidelines" for this repository. It avoids excessive generalizations and focuses on minimal principles that are useful for practical decision-making.

### TypeScript
- **Type Safety First**: Prohibit casual use of `any`/`unknown`. Keep type holes narrow and closed.
- **Explicit Types for Public APIs**: Annotate arguments and return values for exported functions/components.
- **Leverage Union/Discriminated Union**: Prefer union types over `enum`. Use tagged unions for discrimination.
- **Explicit Nullable**: Include `undefined`/`null` in types when allowed. Use early returns for guards.
- **Promise/async**: Use `async/await` as default. Don't leave unhandled Promises.
- **Utilities**: Place reusable functions in `src/lib/utils.ts` or `src/lib/utils/`.

### Naming & Structure
- **Naming**: No abbreviations. Functions use verbs/phrases, variables use nouns/phrases. Unify `is/has/can/should` for boolean values.
- **Components**: `PascalCase`. Hooks use `use*`. Constants use `UPPER_SNAKE_CASE` only when necessary.
- **Import Order**: External → Aliases (`@/*`) → Relative. Types use `import type`.
- **Early Return**: Keep nesting shallow. Reduce branching with guard clauses.

### React / Next.js (App Router)
- **Server First**: Default to server components. Use `"use client"` only when client-side is necessary.
- **Props Design**: Explicit types. Split/complexify complex Props. Reduce branching with default values.
- **State Management**: Use Zustand for client-side state. Keep stores lightweight and focused on specific domains.
- **State Minimization**: Don't hold derived state. Consolidate side effects in `useEffect` with accurate dependency arrays.
- **Keys/Lists**: Stable keys required. Array index is last resort.
- **Accessibility**: Thorough implementation of `aria-*`, label-related attributes, and focus management.
- **Routing**: Place APIs in `src/app/api/**/route.ts`. Use `NextResponse` with explicit headers and appropriate status codes.
- **Fetch/Cache**: Document strategy (`{ cache: 'no-store' }` or `{ next: { revalidate } }`).

### UI (Tailwind v4 / shadcn/ui)
- **Utility First**: Start with Tailwind. Don't increase duplicate custom CSS.
- **Class Combination**: Use `clsx` + `tailwind-merge`. Avoid string concatenation.
- **Arbitrary Values with Restraint**: Prioritize design scale. Variable-ize necessary arbitrary values.
- **Components**: Common UI goes in `src/components/ui/*`. Add with `pnpm dlx shadcn add <component>`.
- **Icons**: Use `react-icons` (e.g., `import { FaGithub } from 'react-icons/fa'`).

### Error Handling / Logging
- **Guards and Fallbacks**: Guard user input/external I/O and provide user-understandable failure modes.
- **Exceptions**: Only `throw` in truly exceptional cases. Use explicit return values for recoverable situations.

### Format / Lint / Test
- **Format**: Follow Prettier (`pnpm format`).
- **Lint**: Comply with ESLint v9 flat config (`pnpm lint`).
- **Testing**: Jest (`jsdom` + `babel-jest`). Manipulate/verify DOM using Testing Library patterns.

### Git / Commits
- **Conventional Commits**: `feat/fix/chore/refactor/docs/test`. Messages explain Why in 1-2 sentences.
- **Granularity**: One commit, one intention. Minimize inclusion of auto-generated files.
